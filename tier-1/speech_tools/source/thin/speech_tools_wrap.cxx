/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#if defined(_WIN32) || defined(__CYGWIN32__)
#  define DllExport   __declspec( dllexport )
#  define SWIGSTDCALL __stdcall
#else
#  define DllExport  
#  define SWIGSTDCALL
#endif 


#ifdef __cplusplus
#  include <new>
#endif



/* Callback for returning strings to Ada without leaking memory */

typedef char * (SWIGSTDCALL* SWIG_AdaStringHelperCallback)(const char *);
static SWIG_AdaStringHelperCallback SWIG_ada_string_callback = NULL;



/* probably obsolete ...
#ifdef __cplusplus
extern "C" 
#endif
DllExport void SWIGSTDCALL SWIGRegisterStringCallback_CORE_MODULE(SWIG_AdaStringHelperCallback callback) {
  SWIG_ada_string_callback = callback;
}
*/



/* Contract support */
/*
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_AdaThrowException(SWIG_AdaArgumentOutOfRangeException, msg); return nullreturn; } else
*/

#define protected public
#define private   public

  #include <speech_tools/EST.h>


   /// EST_Wave
   //
   
   EST_Wave*
   new_EST_Wave ()
   {
      return new EST_Wave();
   }


   int
   EST_Wave_num_samples (EST_Wave*    Self)
   {
      return Self->num_samples();
   }
   
   
   int
   EST_Wave_num_channels (EST_Wave*    Self)
   {
      return Self->num_channels();
   }
   
   
   int
   EST_Wave_sample_rate (EST_Wave*    Self)
   {
      return Self->sample_rate();
   }
   

   int
   EST_Wave_length (EST_Wave*    Self)
   {
      return Self->length();
   }
   
   
   float
   EST_Wave_end (EST_Wave*    Self)
   {
      return Self->end();
   }
   

   short int*
   EST_Wave_Data (EST_Wave*    Self)
   {
      return Self->values().memory();
   }
   

   void
   EST_Wave_resample (EST_Wave*    Self,   int    new_Rate)
   {
      return Self->resample (new_Rate);
   }
   
   
   /// EST_String
   //

   EST_String*
   new_EST_String()
   {
      return new EST_String();
   }


   EST_String*
   new_EST_String (const char*   From)
   {
      return new EST_String (From);
   }


#undef protected
#undef private
#ifdef __cplusplus 
extern "C" {
#endif
DllExport void * SWIGSTDCALL Ada_new_EST_Wave (
  )
{
  void * jresult ;
  EST_Wave *result = 0 ;
  
  result = (EST_Wave *)new_EST_Wave();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_EST_Wave_num_samples (
  void * jarg1
  )
{
  int jresult ;
  EST_Wave *arg1 = (EST_Wave *) 0 ;
  int result;
  
  arg1 = (EST_Wave *)jarg1; 
  
  result = (int)EST_Wave_num_samples(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_EST_Wave_num_channels (
  void * jarg1
  )
{
  int jresult ;
  EST_Wave *arg1 = (EST_Wave *) 0 ;
  int result;
  
  arg1 = (EST_Wave *)jarg1; 
  
  result = (int)EST_Wave_num_channels(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_EST_Wave_sample_rate (
  void * jarg1
  )
{
  int jresult ;
  EST_Wave *arg1 = (EST_Wave *) 0 ;
  int result;
  
  arg1 = (EST_Wave *)jarg1; 
  
  result = (int)EST_Wave_sample_rate(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_EST_Wave_length (
  void * jarg1
  )
{
  int jresult ;
  EST_Wave *arg1 = (EST_Wave *) 0 ;
  int result;
  
  arg1 = (EST_Wave *)jarg1; 
  
  result = (int)EST_Wave_length(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport float SWIGSTDCALL Ada_EST_Wave_end (
  void * jarg1
  )
{
  float jresult ;
  EST_Wave *arg1 = (EST_Wave *) 0 ;
  float result;
  
  arg1 = (EST_Wave *)jarg1; 
  
  result = (float)EST_Wave_end(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport short* SWIGSTDCALL Ada_EST_Wave_Data (
  void * jarg1
  )
{
  short* jresult ;
  EST_Wave *arg1 = (EST_Wave *) 0 ;
  short *result = 0 ;
  
  arg1 = (EST_Wave *)jarg1; 
  
  result = (short *)EST_Wave_Data(arg1);
  
  jresult = (short *) result; 
  
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_EST_Wave_resample (
  void * jarg1
  ,
  
  int jarg2
  )
{
  EST_Wave *arg1 = (EST_Wave *) 0 ;
  int arg2 ;
  
  arg1 = (EST_Wave *)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  EST_Wave_resample(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_new_EST_String__SWIG_0 (
  )
{
  void * jresult ;
  EST_String *result = 0 ;
  
  result = (EST_String *)new_EST_String();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_new_EST_String__SWIG_1 (
  char * jarg1
  )
{
  void * jresult ;
  char *arg1 = (char *) 0 ;
  EST_String *result = 0 ;
  
  arg1 = jarg1; 
  
  result = (EST_String *)new_EST_String((char const *)arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif

