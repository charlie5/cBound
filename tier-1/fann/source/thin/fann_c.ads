-- This file is generated by SWIG. Please do *not* modify by hand.
--
with interfaces.c;
with swig;
with interfaces.C;



package fann_c is

   -- FILE
   -- 
   subtype FILE is swig.opaque_structure;

   type FILE_array is array (interfaces.C.Size_t range <>) of aliased fann_c.FILE;

   -- fann_type
   -- 
   subtype fann_type is interfaces.c.c_float;

   type fann_type_array is array (interfaces.C.Size_t range <>) of aliased fann_c.fann_type;

   -- fann_errno_enum
   -- 
   type fann_errno_enum is (   FANN_E_NO_ERROR,
   FANN_E_CANT_OPEN_CONFIG_R,
   FANN_E_CANT_OPEN_CONFIG_W,
   FANN_E_WRONG_CONFIG_VERSION,
   FANN_E_CANT_READ_CONFIG,
   FANN_E_CANT_READ_NEURON,
   FANN_E_CANT_READ_CONNECTIONS,
   FANN_E_WRONG_NUM_CONNECTIONS,
   FANN_E_CANT_OPEN_TD_W,
   FANN_E_CANT_OPEN_TD_R,
   FANN_E_CANT_READ_TD,
   FANN_E_CANT_ALLOCATE_MEM,
   FANN_E_CANT_TRAIN_ACTIVATION,
   FANN_E_CANT_USE_ACTIVATION,
   FANN_E_TRAIN_DATA_MISMATCH,
   FANN_E_CANT_USE_TRAIN_ALG,
   FANN_E_TRAIN_DATA_SUBSET,
   FANN_E_INDEX_OUT_OF_BOUND,
   FANN_E_SCALE_NOT_PRESENT,
   FANN_E_INPUT_NO_MATCH,
   FANN_E_OUTPUT_NO_MATCH);

   for fann_errno_enum use (   FANN_E_NO_ERROR => 0,
   FANN_E_CANT_OPEN_CONFIG_R => 1,
   FANN_E_CANT_OPEN_CONFIG_W => 2,
   FANN_E_WRONG_CONFIG_VERSION => 3,
   FANN_E_CANT_READ_CONFIG => 4,
   FANN_E_CANT_READ_NEURON => 5,
   FANN_E_CANT_READ_CONNECTIONS => 6,
   FANN_E_WRONG_NUM_CONNECTIONS => 7,
   FANN_E_CANT_OPEN_TD_W => 8,
   FANN_E_CANT_OPEN_TD_R => 9,
   FANN_E_CANT_READ_TD => 10,
   FANN_E_CANT_ALLOCATE_MEM => 11,
   FANN_E_CANT_TRAIN_ACTIVATION => 12,
   FANN_E_CANT_USE_ACTIVATION => 13,
   FANN_E_TRAIN_DATA_MISMATCH => 14,
   FANN_E_CANT_USE_TRAIN_ALG => 15,
   FANN_E_TRAIN_DATA_SUBSET => 16,
   FANN_E_INDEX_OUT_OF_BOUND => 17,
   FANN_E_SCALE_NOT_PRESENT => 18,
   FANN_E_INPUT_NO_MATCH => 19,
   FANN_E_OUTPUT_NO_MATCH => 20);

   pragma Convention (C, fann_errno_enum);


   type fann_errno_enum_array is array (interfaces.C.Size_t range <>) of aliased fann_c.fann_errno_enum;

   -- fann_train_enum
   -- 
   type fann_train_enum is (   FANN_TRAIN_INCREMENTAL,
   FANN_TRAIN_BATCH,
   FANN_TRAIN_RPROP,
   FANN_TRAIN_QUICKPROP,
   FANN_TRAIN_SARPROP);

   for fann_train_enum use (   FANN_TRAIN_INCREMENTAL => 0,
   FANN_TRAIN_BATCH => 1,
   FANN_TRAIN_RPROP => 2,
   FANN_TRAIN_QUICKPROP => 3,
   FANN_TRAIN_SARPROP => 4);

   pragma Convention (C, fann_train_enum);


   type fann_train_enum_array is array (interfaces.C.Size_t range <>) of aliased fann_c.fann_train_enum;

   -- fann_activationfunc_enum
   -- 
   type fann_activationfunc_enum is (   FANN_LINEAR,
   FANN_THRESHOLD,
   FANN_THRESHOLD_SYMMETRIC,
   FANN_SIGMOID,
   FANN_SIGMOID_STEPWISE,
   FANN_SIGMOID_SYMMETRIC,
   FANN_SIGMOID_SYMMETRIC_STEPWISE,
   FANN_GAUSSIAN,
   FANN_GAUSSIAN_SYMMETRIC,
   FANN_GAUSSIAN_STEPWISE,
   FANN_ELLIOT,
   FANN_ELLIOT_SYMMETRIC,
   FANN_LINEAR_PIECE,
   FANN_LINEAR_PIECE_SYMMETRIC,
   FANN_SIN_SYMMETRIC,
   FANN_COS_SYMMETRIC,
   FANN_SIN,
   FANN_COS);

   for fann_activationfunc_enum use (   FANN_LINEAR => 0,
   FANN_THRESHOLD => 1,
   FANN_THRESHOLD_SYMMETRIC => 2,
   FANN_SIGMOID => 3,
   FANN_SIGMOID_STEPWISE => 4,
   FANN_SIGMOID_SYMMETRIC => 5,
   FANN_SIGMOID_SYMMETRIC_STEPWISE => 6,
   FANN_GAUSSIAN => 7,
   FANN_GAUSSIAN_SYMMETRIC => 8,
   FANN_GAUSSIAN_STEPWISE => 9,
   FANN_ELLIOT => 10,
   FANN_ELLIOT_SYMMETRIC => 11,
   FANN_LINEAR_PIECE => 12,
   FANN_LINEAR_PIECE_SYMMETRIC => 13,
   FANN_SIN_SYMMETRIC => 14,
   FANN_COS_SYMMETRIC => 15,
   FANN_SIN => 16,
   FANN_COS => 17);

   pragma Convention (C, fann_activationfunc_enum);


   type fann_activationfunc_enum_array is array (interfaces.C.Size_t range <>) of aliased fann_c.fann_activationfunc_enum;

   -- fann_errorfunc_enum
   -- 
   type fann_errorfunc_enum is (   FANN_ERRORFUNC_LINEAR,
   FANN_ERRORFUNC_TANH);

   for fann_errorfunc_enum use (   FANN_ERRORFUNC_LINEAR => 0,
   FANN_ERRORFUNC_TANH => 1);

   pragma Convention (C, fann_errorfunc_enum);


   type fann_errorfunc_enum_array is array (interfaces.C.Size_t range <>) of aliased fann_c.fann_errorfunc_enum;

   -- fann_stopfunc_enum
   -- 
   type fann_stopfunc_enum is (   FANN_STOPFUNC_MSE,
   FANN_STOPFUNC_BIT);

   for fann_stopfunc_enum use (   FANN_STOPFUNC_MSE => 0,
   FANN_STOPFUNC_BIT => 1);

   pragma Convention (C, fann_stopfunc_enum);


   type fann_stopfunc_enum_array is array (interfaces.C.Size_t range <>) of aliased fann_c.fann_stopfunc_enum;

   -- fann_nettype_enum
   -- 
   type fann_nettype_enum is (   FANN_NETTYPE_LAYER,
   FANN_NETTYPE_SHORTCUT);

   for fann_nettype_enum use (   FANN_NETTYPE_LAYER => 0,
   FANN_NETTYPE_SHORTCUT => 1);

   pragma Convention (C, fann_nettype_enum);


   type fann_nettype_enum_array is array (interfaces.C.Size_t range <>) of aliased fann_c.fann_nettype_enum;





   FANN_ERRSTR_MAX : constant  := 128;
   the_NULL : constant  := 0;





end fann_c;
